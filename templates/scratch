# scratch
# placeholder



	columns = ['Open', 'High', 'Low', 'Close', 'Adusted Close', 'Volume', 'Dividend Amount', 'Split Coefficient']
	prices = pd.DataFrame(index=dates, columns=columns)

	for i in range(0, 100): 
	  for j in range(0, 8): 
	    prices.iloc[i,j] = pd.to_numeric(pd.DataFrame(list(response.json().get('Time Series (Daily)').get(dates[i]).items())).transpose().iloc[1,:].transpose()[j])

	stock_record = prices.iloc[::-1]

	x = np.array(dates, dtype=np.datetime64)
	y = stock_record.iloc[:,4] 

	# create a new plot with a title and axis labels
	p = figure(title="Stock Price Over Time", # THIS VALUE GETS CHANGED DEPENDING ON USER INPUT
	           x_axis_label='Date', 
	           x_axis_type="datetime", 
	           y_axis_label='Value') # THIS VALUE GETS CHANGED DEPENDING ON USER INPUT

	# add a line renderer with legend and line thickness
	p.line(x, y, legend_label="Temp.", line_width=2)

	script, div = components(p)

	cdn_js = CDN.js_files
	cdn_css = CDN.css_files









	stock_ticker = str(request.form.get("stock_ticker"))
	key = "XXX"
	url = 'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol={}&apikey={}'.format(stock_ticker, key)
	response = requests.get(url)

	if not stock_ticker or bool(response.json().get('Time Series (Daily)')): 
		error_message = "You need to specify a proper stock ticker or this ticker does not exist."
		return render_template("fail.html", error_message = error_message, stock_ticker = stock_ticker)

	stock_record = pd.DataFrame(response.json().get('Time Series (Daily)')).transpose().iloc[::-1]

	stock_record = stock_record.rename(columns={'1. open':'Open',  '2. high':'High',
												'3. low':'Low', '4. close':'Close', 
                                             	'5. adjusted close':'Adjusted Close', '6. volume':'Volume', 
                                             	'7. dividend amount':'Dividend Amount', '8. split coefficient':'Split Coefficient'})

	dates = list(stock_record.index)

	x = np.array(dates, dtype=np.datetime64)
	# y = list(pd.to_numeric(stock_record.iloc[:,0]))
	# y = list(pd.to_numeric(stock_record.loc[:,"4. close"]))
	y = list(pd.to_numeric(stock_record['Open']))

	# create a new plot with a title and axis labels
	p = figure(title="Stock Price Over Time", # THIS VALUE GETS CHANGED DEPENDING ON USER INPUT
	           x_axis_label='Date', 
	           x_axis_type="datetime", 
	           y_axis_label='Price') # THIS VALUE GETS CHANGED DEPENDING ON USER INPUT

	# add a line renderer with legend and line thickness
	p.line(x, y, legend_label="Temp.", line_width=2)

	script, div = components(p)

	cdn_js = CDN.js_files
	cdn_css = CDN.css_files